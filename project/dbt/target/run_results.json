{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-10-16T17:28:30.328682Z", "invocation_id": "1e41dec0-75db-48ea-938e-77289ec52f52", "invocation_started_at": "2025-10-16T17:28:29.325249Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.141816Z", "completed_at": "2025-10-16T17:28:30.149623Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.167652Z", "completed_at": "2025-10-16T17:28:30.211286Z"}], "thread_id": "Thread-3", "execution_time": 0.07843613624572754, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.stg_teams", "compiled": true, "compiled_code": "\nselect season,\n    name as team_name,\n    team as team_code,\n    sum(games_played) as games_played,\n    sum(goalsFor) as goalsFor,\n    sum(goalsAgainst) as goalsAgainst,\n    sum(goalsFor) - sum(goalsAgainst) as goal_differential,\n    sum(xGoalsFor) as xGoalsFor,\n    sum(xGoalsAgainst) as xGoalsAgainst,\n    current_timestamp as loaded_at\nfrom \"nhl\".\"bronze\".\"teams\"\nwhere season is not null\n    and name is not null\ngroup by season,\n    name,\n    team", "relation_name": "\"nhl\".\"silver\".\"stg_teams\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.134448Z", "completed_at": "2025-10-16T17:28:30.143857Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.144334Z", "completed_at": "2025-10-16T17:28:30.212776Z"}], "thread_id": "Thread-1", "execution_time": 0.0810849666595459, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.stg_goalies", "compiled": true, "compiled_code": "\n\nselect \n    playerId as player_id,\n    season,\n    name as player_name,\n    team as team_code,\n    position,\n    max(games_played) as games_played,\n    max(icetime) as ice_time,\n    sum(xGoals) as expected_goals,\n    sum(goals) as goals,\n    sum(unblocked_shot_attempts) as unblocked_shot_attempts,\n    sum(xRebounds) as expected_rebounds,\n    sum(rebounds) as rebounds,\n    sum(xFreeze) as expected_freeze,\n    sum(\"freeze\") as freeze,\n    sum(xOnGoal) as expected_on_goal,\n    sum(ongoal) as on_goal,\n    sum(xPlayStopped) as expected_play_stopped,\n    sum(playStopped) as play_stopped,\n    sum(xPlayContinuedInZone) as expected_play_continued_in_zone,\n    sum(playContinuedInZone) as play_continued_in_zone,\n    sum(xPlayContinuedOutsideZone) as expected_play_continued_outside_zone,\n    sum(playContinuedOutsideZone) as play_continued_outside_zone,\n    sum(flurryAdjustedxGoals) as flurry_adjusted_expected_goals,\n    sum(lowDangerShots) as low_danger_shots,\n    sum(mediumDangerShots) as medium_danger_shots,\n    sum(highDangerShots) as high_danger_shots,\n    sum(lowDangerxGoals) as low_danger_expected_goals,\n    sum(mediumDangerxGoals) as medium_danger_expected_goals,\n    sum(highDangerxGoals) as high_danger_expected_goals,\n    sum(lowDangerGoals) as low_danger_goals,\n    sum(mediumDangerGoals) as medium_danger_goals,\n    sum(highDangerGoals) as high_danger_goals,\n    sum(blocked_shot_attempts) as blocked_shot_attempts,\n    max(penalityMinutes) as penalty_minutes,\n    max(penalties) as penalties,\n    current_timestamp as loaded_at\nfrom \"nhl\".\"bronze\".\"goalies\"\nwhere playerId is not null\n    and season is not null\ngroup by playerId, season, name, team, position", "relation_name": "\"nhl\".\"silver\".\"stg_goalies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.139842Z", "completed_at": "2025-10-16T17:28:30.144114Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.156184Z", "completed_at": "2025-10-16T17:28:30.213794Z"}], "thread_id": "Thread-2", "execution_time": 0.08095288276672363, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.stg_skaters", "compiled": true, "compiled_code": "\nselect playerId as player_id,\n    season,\n    name as player_name,\n    team as team_code,\n    position,\n    sum(games_played) as games_played,\n    sum(icetime) as ice_time,\n    sum(shifts) as shifts,\n    sum(gameScore) as game_score,\n    sum(I_F_goals) as goals,\n    sum(I_F_points) as points,\n    sum(I_F_shotsOnGoal) as shots_on_goal,\n    sum(I_F_primaryAssists) as primary_assists,\n    sum(I_F_secondaryAssists) as secondary_assists,\n    sum(I_F_xOnGoal) as expected_on_goal,\n    sum(I_F_xGoals) as expected_goals,\n    sum(I_F_xRebounds) as expected_rebounds,\n    sum(I_F_rebounds) as rebounds,\n    sum(I_F_freeze) as freeze,\n    sum(I_F_playStopped) as play_stopped,\n    sum(I_F_playContinuedInZone) as play_continued_in_zone,\n    sum(I_F_playContinuedOutsideZone) as play_continued_outside_zone,\n    sum(I_F_lowDangerShots) as low_danger_shots,\n    sum(I_F_mediumDangerShots) as medium_danger_shots,\n    sum(I_F_highDangerShots) as high_danger_shots,\n    sum(I_F_lowDangerxGoals) as low_danger_expected_goals,\n    sum(I_F_mediumDangerxGoals) as medium_danger_expected_goals,\n    sum(I_F_highDangerxGoals) as high_danger_expected_goals,\n    sum(I_F_lowDangerGoals) as low_danger_goals,\n    sum(I_F_mediumDangerGoals) as medium_danger_goals,\n    sum(I_F_highDangerGoals) as high_danger_goals,\n    case\n        when sum(games_played) > 0 then true\n        else false\n    end as is_active_player,\n    case\n        when sum(games_played) > 0 then round(sum(I_F_points) * 1.0 / sum(games_played), 2)\n        else null\n    end as points_per_game,\n    case\n        when sum(I_F_shotsOnGoal) > 0 then round(sum(I_F_goals) * 100.0 / sum(I_F_shotsOnGoal), 2)\n        else null\n    end as shooting_percentage,\n    current_timestamp as loaded_at\nfrom \"nhl\".\"bronze\".\"skaters\"\nwhere playerId is not null\n    and season is not null\ngroup by playerId,\n    season,\n    name,\n    team,\n    position", "relation_name": "\"nhl\".\"silver\".\"stg_skaters\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.221186Z", "completed_at": "2025-10-16T17:28:30.237075Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.237419Z", "completed_at": "2025-10-16T17:28:30.258205Z"}], "thread_id": "Thread-1", "execution_time": 0.037995100021362305, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.int_all_players", "compiled": true, "compiled_code": "\n\nwith all_players as (\n    select \n        player_id,\n        season,\n        player_name,\n        team_code,\n        'G' as position,\n        null as games_played,\n        null as points_per_game,\n        null as shooting_percentage\n    from \"nhl\".\"silver\".\"stg_goalies\"\n    \n    union all\n    \n    select \n        player_id,\n        season,\n        player_name,\n        team_code,\n        position,\n        games_played,\n        points_per_game,\n        shooting_percentage\n    from \"nhl\".\"silver\".\"stg_skaters\"\n)\n\nselect *,\n    case \n        when position = 'G' then 'Goalie'\n        when position in ('C', 'L', 'R', 'LW', 'RW') then 'Forward'\n        when position in ('D') then 'Defense'\n        else 'Unknown'\n    end as position_group,\n    current_timestamp as loaded_at\nfrom all_players", "relation_name": "\"nhl\".\"silver\".\"int_all_players\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.218810Z", "completed_at": "2025-10-16T17:28:30.223987Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.224230Z", "completed_at": "2025-10-16T17:28:30.289239Z"}], "thread_id": "Thread-4", "execution_time": 0.07182788848876953, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.mart_team_standings", "compiled": true, "compiled_code": "\n\nselect \n    season,\n    team_name,\n    team_code,\n    games_played,\n    goalsFor,\n    goalsAgainst,\n    goal_differential,\n    xGoalsFor,\n    xGoalsAgainst,\n    row_number() over (\n        order by goalsFor desc,\n            goal_differential desc\n    ) as standings_rank,\n    loaded_at\nfrom \"nhl\".\"silver\".\"stg_teams\"\norder by standings_rank", "relation_name": "\"nhl\".\"silver\".\"mart_team_standings\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.268032Z", "completed_at": "2025-10-16T17:28:30.276884Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.277194Z", "completed_at": "2025-10-16T17:28:30.319709Z"}], "thread_id": "Thread-2", "execution_time": 0.05508685111999512, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.mart_goalie_performance", "compiled": true, "compiled_code": "\n\nselect \n    player_id,\n    player_name,\n    season,\n    team_code,\n    position,\n    loaded_at\nfrom \"nhl\".\"silver\".\"int_all_players\"\nwhere position_group in ('Goalie')\n    and games_played >= 10", "relation_name": "\"nhl\".\"silver\".\"mart_goalie_performance\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-16T17:28:30.270270Z", "completed_at": "2025-10-16T17:28:30.279467Z"}, {"name": "execute", "started_at": "2025-10-16T17:28:30.279760Z", "completed_at": "2025-10-16T17:28:30.324198Z"}], "thread_id": "Thread-3", "execution_time": 0.05734515190124512, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.nhl_analytics.mart_player_performance", "compiled": true, "compiled_code": "\n\nselect \n    player_id,\n    player_name,\n    team_code,\n    position,\n    position_group,\n    games_played,\n    points_per_game,\n    shooting_percentage,\n    case\n        when points_per_game >= 1.0 then 'Elite'\n        when points_per_game >= 0.7 then 'Very Good'\n        when points_per_game >= 0.5 then 'Good'\n        when points_per_game >= 0.3 then 'Average'\n        else 'Below Average'\n    end as offensive_rating,\n    loaded_at\nfrom \"nhl\".\"silver\".\"int_all_players\"\nwhere position_group in ('Forward', 'Defense')\n    and games_played >= 10", "relation_name": "\"nhl\".\"silver\".\"mart_player_performance\"", "batch_results": null}], "elapsed_time": 0.2965230941772461, "args": {"log_level": "info", "send_anonymous_usage_stats": true, "state_modified_compare_vars": false, "favor_state": false, "use_colors_file": true, "use_colors": true, "print": true, "project_dir": "/Users/izaakford/Desktop/demo_sports_data_project/project/dbt", "log_level_file": "debug", "profiles_dir": ".", "populate_cache": true, "introspect": true, "defer": false, "state_modified_compare_more_unrendered_values": false, "empty": false, "quiet": false, "version_check": true, "show_all_deprecations": false, "write_json": true, "macro_debugging": false, "partial_parse": true, "require_generic_test_arguments_property": true, "cache_selected_only": false, "require_all_warnings_handled_by_warn_error": false, "log_path": "/Users/izaakford/Desktop/demo_sports_data_project/project/dbt/logs", "require_batched_execution_for_custom_microbatch_strategy": false, "require_yaml_configuration_for_mf_time_spines": false, "source_freshness_run_project_hooks": true, "static_parser": true, "exclude": [], "printer_width": 80, "strict_mode": false, "invocation_command": "dbt run --profiles-dir .", "use_fast_test_edges": false, "validate_macro_args": false, "require_resource_names_without_spaces": true, "indirect_selection": "eager", "select": [], "vars": {}, "warn_error_options": {"error": [], "warn": [], "silence": []}, "partial_parse_file_diff": true, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "require_nested_cumulative_type_params": false, "upload_to_artifacts_ingest_api": false, "log_format": "default", "show_resource_report": false, "skip_nodes_if_on_run_start_fails": false, "log_file_max_bytes": 10485760, "which": "run"}}